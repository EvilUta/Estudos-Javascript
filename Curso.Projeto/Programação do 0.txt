
üü® SENTEN√áAS EM JAVASCRIPT
Senten√ßa √© uma instru√ß√£o completa, como uma linha de c√≥digo.

Termina, geralmente, com ponto e v√≠rgula (;), embora em JS seja opcional na maioria dos casos.

exemplo = 

let nome = "Renan";
console.log(nome);

üü© BLOCOS DE C√ìDIGO
S√£o delimitados por chaves { }.

Usados para agrupar v√°rias senten√ßas, por exemplo em fun√ß√µes, if, for, etc.

Exemplo:
if (idade >= 18) {
  console.log("Maior de idade");
  podeEntrar = true;
}

üü¶ VARI√ÅVEIS: var, let e const
üîπ var
Forma antiga de declarar vari√°veis.

Escopo de fun√ß√£o, ignora bloco (pode dar bugs).

Permite reatribui√ß√£o e redeclara√ß√£o.

Exemplo:

var nome = "Jo√£o";
var nome = "Pedro"; // OK

Evite usar var, pois pode causar comportamento inesperado.

üîπ let
Introduzido no ES6 (2015).

Tem escopo de bloco ({ }).

Pode ser reatribu√≠do, mas n√£o pode ser redeclarado no mesmo escopo.

Exemplo:
let idade = 25;
idade = 30; // OK
// let idade = 35; // Erro se estiver no mesmo escopo

üîπ const
Tamb√©m do ES6.

Escopo de bloco como o let.

N√£o pode ser reatribu√≠do nem redeclarado.

Ideal para valores fixos ou imut√°veis (por refer√™ncia, objetos podem ser alterados internamente).

Exemplo:

const PI = 3.14;
// PI = 3.1415; // Erro
‚úÖ Use const por padr√£o. S√≥ use let se precisar mudar o valor depois.

üß™ EXEMPLO COMPARATIVO:
function exemplo() {
  if (true) {
    var x = 10;
    let y = 20;
    const z = 30;
  }

  console.log(x); // 10
  // console.log(y); // Erro: y n√£o est√° definido
  // console.log(z); // Erro: z n√£o est√° definido
}

üìå DICA DE BOA PR√ÅTICA:

| Situa√ß√£o                         | Qual usar?        |
| -------------------------------- | ----------------- |
| Valor que n√£o muda               | `const`           |
| Valor que muda                   | `let`             |
| C√≥digo legado ou compatibilidade | `var` (raramente) |

üü® O que √© typeof?
üìå Sintaxe:
typeof valor

üü© Tipos poss√≠veis que typeof pode retornar:
| Tipo de dado  | Exemplo                         | `typeof` retorna                |
| ------------- | ------------------------------- | ------------------------------- |
| **Number**    | `42`, `3.14`, `NaN`, `Infinity` | `"number"`                      |
| **String**    | `"Ol√°"`, `'texto'`, `` `Oi` ``  | `"string"`                      |
| **Boolean**   | `true`, `false`                 | `"boolean"`                     |
| **Undefined** | Vari√°vel sem valor              | `"undefined"`                   |
| **Null**      | `null`                          | **üü• `"object"` (bug antigo!)** |
| **Object**    | `{}`, `[]`, `new Date()`        | `"object"`                      |
| **Array**     | `[1,2,3]`                       | `"object"`                      |
| **Function**  | `function() {}` ou `()=>{}`     | `"function"`                    |
| **Symbol**    | `Symbol("id")`                  | `"symbol"`                      |
| **BigInt**    | `123n`, `BigInt(900719925)`     | `"bigint"`                      |

üöÄ Resumo final
| Tipo      | Verifica√ß√£o com `typeof` | Observa√ß√£o                               |
| --------- | ------------------------ | ---------------------------------------- |
| string    | `"string"`               |                                          |
| number    | `"number"`               | Inclui `NaN`, `Infinity`                 |
| boolean   | `"boolean"`              |                                          |
| undefined | `"undefined"`            | Vari√°vel sem valor atribu√≠do             |
| null      | `"object"` ‚ùóÔ∏è             | Bug do JS, use `valor === null`          |
| object    | `"object"`               | Inclui arrays, objetos, `null`, etc.     |
| function  | `"function"`             | Somente fun√ß√µes                          |
| symbol    | `"symbol"`               | Pouco usado, para identificadores √∫nicos |
| bigint    | `"bigint"`               | Para n√∫meros muito grandes (ex: 10n)     |

OPERADORES
1)Bin√°rios/Un√°rios/Tern√°rios 

üü© Operadores Un√°rios
Atuam sobre um √∫nico operando.

Exemplos:
let x = 5;
-x           // -5 (nega√ß√£o)
typeof x     // "number"
++x          // 6 (incremento)
--x          // 5 (decremento)

üü¶ Operadores Bin√°rios
Atuam sobre dois operandos.

Exemplos:
5 + 3        // 8 (adi√ß√£o)
10 - 2       // 8 (subtra√ß√£o)
4 * 2        // 8 (multiplica√ß√£o)
6 / 2        // 3 (divis√£o)
5 === 5      // true (compara√ß√£o)
a && b       // l√≥gico E
a || b       // l√≥gico OU

üü® Operador Tern√°rio
Usa tr√™s operandos.

√â uma forma curta de if/else.

Sintaxe:
condi√ß√£o ? valorSeVerdadeiro : valorSeFalso;

Exemplo: 
let idade = 20;
let status = idade >= 18 ? "Maior" : "Menor"; // "Maior"

Resumo: 
| Tipo     | Exemplo               | Quantos operandos? |
| -------- | --------------------- | ------------------ |
| Un√°rio   | `-x`, `++x`, `typeof` | 1                  |
| Bin√°rio  | `a + b`, `x && y`     | 2                  |
| Tern√°rio | `cond ? a : b`        | 3                  |

2)Aritm√©ticos
"+" , "-" , "*" , "/" , "√∑"

Exemplo: 
Console.log(7+3);

3)Relacionais

False / True
7> 3 = True
3< 4 = True
7==7 = True
 
Exemplo:
let nota1 =7;
let nota2 = 8;
let nota3 = 6;

let media = (nota1 + nota2 + nota3) / 3;

if (media >= 7) {
console.log("Aluno aprovado com m√©dia:" + media);

} else { 
console.log("Aluno reprovado com m√©dia:" + media);

3)Atribui√ß√£o
let a = 7;
a = 5;
a = 3 + a;
Pr√≥prio valor da variavel acrescentando ou substituindo
\n -> Quebra de linha no console
Atribui√ß√µes com stings devem estar dentro de "" (aspas"
"\n"
exemplo:
let a "Renan";
let b "Kathleen";

console.log("Namorados \n" + a "\n" + b);

4)L√≥gicos
Operadores l√≥gicos servem para tomar decis√µes com base em valores booleanos (true ou false).
Eles s√£o usados principalmente em estruturas de controle como if, while, etc.

Exemplo:

let bot√£oAzul: false;

if (bot√£oAzul) {
console.log("Continuar");

} else { 
console.log("Erro");


5)Operadores Un√°rios
o aqueles que operam sobre apenas um operando (ou valor). Eles executam a√ß√µes como nega√ß√£o, incremento, convers√£o, etc.

let a = 1;

a = a;
a += a;
a++;
++a;

a--;
a -=a;
--a;

! -> nega√ß√£o
!! -> dupla nega√ß√£o = True (Apenas o 0 fica False)

exemplo;
console.log(!!"texto!"); 
ser√° true

6)Operadores Tern√°rios:
O operador tern√°rio √© uma forma compacta de escrever uma estrutura condicional if/else.

exemplo:
const hora = 14;
const saudacao = hora <= 11 ? "Bom dia" : "Boa tarde" ; 
console.log(saudacao);

------------------------------------------------------------------------------------------------------

Estruturas de controle 
ervem para tomar decis√µes ou controlar o fluxo do programa
permitindo que o c√≥digo execute a√ß√µes diferentes dependendo das condi√ß√µes ou repita a√ß√µes.

 if ( )       -> true or false
 Senten√ßa, bloco ou Estutura de controle
 Se ... ser√° executado
 exemplo: Se botaoContinuar for true, navegar√° para outra tela

 else ( )     -> false (contrario)
 O else √© uma estrutura de controle condicional usada em linguagens como JavaScript, Python, C, etc.
 Ele executa um bloco de c√≥digo alternativo quando a condi√ß√£o do if n√£o √© verdadeira.
 Se n√£o ... 

------------------------------------------------------------------------------------------------------

Estruturas de repeti√ß√£o
S√£o comandos que repetem um bloco de c√≥digo v√°rias vezes, autom√°ticamente, at√© que uma condi√ß√£o pare essa repeti√ß√£o.
Imagine que voc√™ quer imprimir "Ol√°!" 100 vezes. Seria absurdo escrever console.log("Ol√°!") 100 vezes, certo?
Com um la√ßo de repeti√ß√£o, voc√™ escreve isso uma vez s√≥, e o computador repete pra voc√™!

For
O for √© ideal quando sabemos exatamente quantas vezes queremos repetir uma tarefa.

While
O while √© usado quando n√£o sabemos quantas vezes a repeti√ß√£o ser√° feita
mas sabemos a condi√ß√£o que precisa continuar sendo verdadeira.

Do/While
parecido com o while, mas o bloco √© executado pelo menos uma vez, mesmo se a condi√ß√£o for falsa.

exemplo ->
while(true) {
  console.log("Looping");
}

------------------------------------------------------------------------------------------------------

String 
Em JavaScript, template strings (ou template literals) s√£o uma forma de criar strings mais flex√≠vel e leg√≠vel
as s√£o delimitadas por crases (`), e permitem:
Exemplo:
const nome = "Renan";
const idade = 21;
const frase = `Meu nome √© ${nome} e eu tenho ${idade} anos.`;
console.log(frase); // Meu nome √© Renan e eu tenho 21 anos.

------------------------------------------------------------------------------------------------------
Switch
O switch √© uma estrutura de controle de fluxo em JavaScript (e outras linguagens)
Usado para decis√µes com base em m√∫ltiplos valores poss√≠veis de uma vari√°vel ou express√£o.

exemplo:

let cor = "vermelho";

switch (cor) {
  case "azul":
    console.log("Voc√™ escolheu azul");
    break;

  case "vermelho":
    console.log("Voc√™ escolheu vermelho");
    break;

  case "verde":
    console.log("Voc√™ escolheu verde");
    break;

  default:
    console.log("Cor n√£o reconhecida");
}

break: Encerra o switch. Sem ele, o c√≥digo "cai" no pr√≥ximo case, mesmo que n√£o seja igual.

default: Opcional. Funciona como o else, executado se nenhum case corresponder.

A compara√ß√£o √© estritamente igual (===).

O case √© uma condi√ß√£o espec√≠fica que √© comparada com o valor da express√£o do switch.

O switch pergunta: ‚ÄúQual √© o valor?‚Äù

O case responde: ‚ÄúSe for esse valor, execute isso.‚Äù

------------------------------------------------------------------------------------------------------
Fun√ß√µes
Function {}
Precisa definir o nome da fun√ß√£o
exemplo:

const d2 = 21;

Function exibirData1() {
console.log (`Dia: ${d1}`);
}

exibirData1();

no console aparecer√°:
Dia: 21

/* N√£o esquecer dos () quando for declarar const dentro do console.log

*Undefined
valor da variavel n√£o inicializada
let a;
let b = null;
let d= undefined;

*Retorno
function sempreRetornaUm() {
return 1;
}


*Paramentros
vari√°veis internas da fun√ß√£o, permitindo que ela trabalhe com dados diferentes a cada vez que √© executada.

exemplo:

function saudacao(nome) {
  console.log("Ol√°, " + nome + "!");
}

saudacao("Renan"); // Sa√≠da: Ol√°, Renan!

nome √© o par√¢metro.

"Renan" √© o argumento passado na chamada da fun√ß√£o.

*Fun√ß√£o
Fun√ß√£o √© um bloco de c√≥digo reutiliz√°vel que realiza uma a√ß√£o espec√≠fica

exemplo: 

function exibirMensagem() {
  console.log("Essa √© uma fun√ß√£o!");
}

exibirMensagem(); // Sa√≠da: Essa √© uma fun√ß√£o!

function declara a fun√ß√£o.

exibirMensagem() √© chamada para executar o c√≥digo dentro dela.

*retornar fun√ß√£o 
Uma fun√ß√£o pode retornar um valor com a palavra-chave return.
ela entrega um resultado para quem a chamou,
e esse resultado pode ser armazenado ou usado em outro lugar.

exemplo:

function somar(a, b) {
  return a + b;
}

let resultado = somar(5, 3);
console.log(resultado); // Sa√≠da: 8

A fun√ß√£o somar retorna a soma dos par√¢metros a e b.

O valor 8 √© armazenado na vari√°vel resultado.

---------------------------------------------------------------------------------------
Array
Extrutura indexada de dados para armazenar v√°rios valores em uma √∫nica vari√°vel.
organizar esses dados em sequ√™ncia, facilitando o acesso, modifica√ß√£o e a intera√ß√£o
sobre eles.

exemplo: 
let numeros = [10, 20, 30, 40, 50];
console.log(numeros[2]); // 30

Array dentro de array;
let matriz = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];
console.log(matriz[1][2]); // 6 (linha 2, coluna 3)

---------------------------------------------------------------------------------------
Objetos

Atributos / Metodos
Objetos em JavaScript s√£o cole√ß√µes de pares chave-valor.
Usados para representar entidades com propriedades e comportamentos.

üß± Atributos (Propriedades)
S√£o valores associados a uma chave (nome) dentro do objeto.

exemplo:
const pessoa = {
  nome: "Renan",
  idade: 20
};

console.log(pessoa.nome); // "Renan"
console.log(pessoa["idade"]); // 20

‚öôÔ∏è M√©todos
S√£o fun√ß√µes associadas a objetos ‚Äì representam comportamentos.

exemplo:
const carro = {
  modelo: "Fusca",
  ligar: function() {
    console.log("Carro ligado!");
  }
};

carro.ligar(); // "Carro ligado!"











