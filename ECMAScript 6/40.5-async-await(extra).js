// Exemplo completo de tratamento de erros com try, throw, catch e finally

// Fun√ß√£o que divide dois n√∫meros
function dividir(a, b) {

  // if serve pra prever condi√ß√µes normais, antes de dar erro
  if (typeof a !== "number" || typeof b !== "number") {
    // se o valor n√£o for n√∫mero, eu lan√ßo (throw) um erro manualmente
    throw new Error("Os valores precisam ser n√∫meros!");
  }

  // se o divisor for 0, eu tamb√©m lan√ßo um erro manualmente
  if (b === 0) {
    throw new Error("N√£o √© poss√≠vel dividir por zero!");
  }

  // se tudo estiver certo, retorno o resultado
  return a / b;
}


// Agora vou tentar executar com try...catch
try {
  // o try tenta executar o c√≥digo normalmente
  console.log("Resultado 1:", dividir(10, 2)); // funciona

  console.log("Resultado 2:", dividir(5, 0)); // erro! vai direto pro catch

  console.log("Essa linha nunca ser√° executada"); // o JS para no erro anterior

} catch (erro) {
  // o catch √© executado quando ocorre um erro dentro do try
  console.log("‚ùå Erro capturado:", erro.message);

} finally {
  // o finally roda SEMPRE ‚Äî mesmo se deu erro ou n√£o
  console.log("üîö Finalizando opera√ß√£o...");
}

console.log("‚úÖ O programa continua rodando normalmente!");
