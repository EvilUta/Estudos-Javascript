
 🧩 1. O que é uma API?

API significa Application Programming Interface — é um meio de comunicação entre sistemas.
Pense nela como um garçom:

 Você → faz um pedido (request).
 O garçom (API) → leva o pedido ao servidor (cozinha).
 O servidor → devolve uma resposta (response) com os dados.

🧠 Exemplo:

> Você acessa um site de clima e ele mostra a previsão.
> O site não “sabe” o clima — ele pede para uma API de meteorologia e exibe o retorno.

---

 🌐 2. O método fetch(): nativo do JavaScript

O fetch() é a forma padrão do navegador de buscar dados de uma API.

 ✅ Exemplo 1 – Requisição GET (buscar dados)

js
fetch('https://jsonplaceholder.typicode.com/posts/1')
  .then(response => response.json()) // converte o retorno em JSON
  .then(data => {
    console.log('Dados recebidos:', data)
  })
  .catch(error => {
    console.error('Erro ao buscar dados:', error)
  })


🔍 O que acontece:

1. O fetch() acessa a URL da API.
2. response.json() transforma a resposta em um objeto JavaScript.
3. O .then() seguinte recebe os dados.
4. Se algo der errado, o .catch() captura o erro.

---

 ✅ Exemplo 2 – Requisição POST (enviar dados)

js
fetch('https://jsonplaceholder.typicode.com/posts', {
  method: 'POST', // tipo de requisição
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    title: 'Novo post',
    body: 'Conteúdo do post',
    userId: 1
  })
})
  .then(response => response.json())
  .then(data => console.log('Post criado:', data))
  .catch(error => console.error('Erro no POST:', error))


🧠 Aqui:

 Usamos method: 'POST' para enviar dados.
 O body precisa estar no formato JSON (por isso o JSON.stringify()).

---

 ⚡ 3. Axios – A Biblioteca para Requisições

O Axios é uma biblioteca externa (precisa ser instalada com npm install axios ou via CDN) que simplifica e melhora o uso de APIs.

 ✅ Exemplo 1 – GET com Axios

js
import axios from 'axios'

axios.get('https://jsonplaceholder.typicode.com/posts/1')
  .then(response => {
    console.log('Dados recebidos:', response.data)
  })
  .catch(error => {
    console.error('Erro na API:', error)
  })


🟢 Diferenças principais:

 O Axios já converte JSON automaticamente (não precisa de response.json()).
 O retorno vem em response.data.
 Lida melhor com erros e suporta configuração de headers, tokens, interceptores etc.

---

 ✅ Exemplo 2 – POST com Axios

js
axios.post('https://jsonplaceholder.typicode.com/posts', {
  title: 'Novo Post com Axios',
  body: 'Conteúdo do post',
  userId: 2
})
  .then(response => {
    console.log('Post criado:', response.data)
  })
  .catch(error => {
    console.error('Erro ao criar post:', error)
  })


---

 🧠 4. Dicas Práticas

 Sempre use .catch() para evitar travamentos no código.
 Use console.log() para ver como os dados chegam (observe a estrutura).
 Teste APIs públicas:

   [https://yesno.wtf/api](https://yesno.wtf/api) → retorna uma resposta “yes” ou “no”.
   [https://jsonplaceholder.typicode.com](https://jsonplaceholder.typicode.com) → dados fictícios.

---

 🚀 5. Desafio: API YesOrNo com Fetch

Vamos criar uma página simples que responde “sim” ou “não” com imagem animada.

 🧱 HTML

html
<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <title>Yes or No API</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      background-color: f3f3f3;
      padding-top: 50px;
    }
    img {
      width: 200px;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <h1>Faça sua pergunta</h1>
  <input id="pergunta" type="text" placeholder="Digite algo...">
  <button id="botao">Perguntar</button>

  <div id="resposta"></div>
  <img id="imagem" src="" alt="">

  <script src="app.js"></script>
</body>
</html>


---

 ⚙️ JavaScript (app.js)

js
document.querySelector('botao').addEventListener('click', () => {
  const pergunta = document.querySelector('pergunta').value
  const respostaDiv = document.querySelector('resposta')
  const imagem = document.querySelector('imagem')

  if (!pergunta.trim()) {
    respostaDiv.textContent = 'Digite uma pergunta primeiro!'
    return
  }

  fetch('https://yesno.wtf/api')
    .then(response => response.json())
    .then(data => {
      respostaDiv.textContent = Resposta: ${data.answer.toUpperCase()}
      imagem.src = data.image
    })
    .catch(error => {
      respostaDiv.textContent = 'Erro ao consultar a API!'
      console.error(error)
    })
})


🧠 O que acontece:

 Quando o usuário clica no botão, o JS faz uma requisição fetch para a API https://yesno.wtf/api.
 Ela devolve algo assim:

  json
  {
    "answer": "yes",
    "forced": false,
    "image": "https://yesno.wtf/assets/yes/2.gif"
  }
  
 O script exibe o texto e a imagem correspondente.

---

 🏁 6. Próximo passo

👉 Experimente trocar o fetch por Axios para ver como muda o código.
Depois podemos evoluir esse exemplo com animações, estilo moderno (Tailwind ou CSS custom) ou até VueJS se quiser.

---

